;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20.11.2023 12:17:13
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0205E0  	LJMP 1504
0x0003	0x0205C2  	LJMP 1474
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020591  	LJMP 1425
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
_translate:
;Drv.c,84 :: 		unsigned char translate(unsigned char c){
;Drv.c,85 :: 		switch (c){
0x0026	0x01F1    	AJMP L_translate30
;Drv.c,86 :: 		case 'À': return 'A';
L_translate32:
0x0028	0x7841    	MOV R0, #65
0x002A	0x22      	RET
;Drv.c,87 :: 		case 'Á': return 0xA0;
L_translate33:
0x002B	0x78A0    	MOV R0, #160
0x002D	0x22      	RET
;Drv.c,88 :: 		case 'Â': return 'B';
L_translate34:
0x002E	0x7842    	MOV R0, #66
0x0030	0x22      	RET
;Drv.c,89 :: 		case 'Ã': return 0xA1;
L_translate35:
0x0031	0x78A1    	MOV R0, #161
0x0033	0x22      	RET
;Drv.c,90 :: 		case 'Ä': return 0xE0;
L_translate36:
0x0034	0x78E0    	MOV R0, #224
0x0036	0x22      	RET
;Drv.c,91 :: 		case 'Å': return 'E';
L_translate37:
0x0037	0x7845    	MOV R0, #69
0x0039	0x22      	RET
;Drv.c,92 :: 		case '¨': return 0xA2;
L_translate38:
0x003A	0x78A2    	MOV R0, #162
0x003C	0x22      	RET
;Drv.c,93 :: 		case 'Æ': return 0xA3;
L_translate39:
0x003D	0x78A3    	MOV R0, #163
0x003F	0x22      	RET
;Drv.c,94 :: 		case 'Ç': return 0xA4;
L_translate40:
0x0040	0x78A4    	MOV R0, #164
0x0042	0x22      	RET
;Drv.c,95 :: 		case 'È': return 0xA5;
L_translate41:
0x0043	0x78A5    	MOV R0, #165
0x0045	0x22      	RET
;Drv.c,96 :: 		case 'É': return 0xA6;
L_translate42:
0x0046	0x78A6    	MOV R0, #166
0x0048	0x22      	RET
;Drv.c,97 :: 		case 'Ê': return 'K';
L_translate43:
0x0049	0x784B    	MOV R0, #75
0x004B	0x22      	RET
;Drv.c,98 :: 		case 'Ë': return 0xA7;
L_translate44:
0x004C	0x78A7    	MOV R0, #167
0x004E	0x22      	RET
;Drv.c,99 :: 		case 'Ì': return 'M';
L_translate45:
0x004F	0x784D    	MOV R0, #77
0x0051	0x22      	RET
;Drv.c,100 :: 		case 'Í': return 'H';
L_translate46:
0x0052	0x7848    	MOV R0, #72
0x0054	0x22      	RET
;Drv.c,101 :: 		case 'Î': return 'O';
L_translate47:
0x0055	0x784F    	MOV R0, #79
0x0057	0x22      	RET
;Drv.c,102 :: 		case 'Ï': return 0xA8;
L_translate48:
0x0058	0x78A8    	MOV R0, #168
0x005A	0x22      	RET
;Drv.c,103 :: 		case 'Ð': return 'P';
L_translate49:
0x005B	0x7850    	MOV R0, #80
0x005D	0x22      	RET
;Drv.c,104 :: 		case 'Ñ': return 'C';
L_translate50:
0x005E	0x7843    	MOV R0, #67
0x0060	0x22      	RET
;Drv.c,105 :: 		case 'Ò': return 'T';
L_translate51:
0x0061	0x7854    	MOV R0, #84
0x0063	0x22      	RET
;Drv.c,106 :: 		case 'Ó': return 0xA9;
L_translate52:
0x0064	0x78A9    	MOV R0, #169
0x0066	0x22      	RET
;Drv.c,107 :: 		case 'Ô': return 0xAA;
L_translate53:
0x0067	0x78AA    	MOV R0, #170
0x0069	0x22      	RET
;Drv.c,108 :: 		case 'Õ': return 'X';
L_translate54:
0x006A	0x7858    	MOV R0, #88
0x006C	0x22      	RET
;Drv.c,109 :: 		case 'Ö': return 0xE1;
L_translate55:
0x006D	0x78E1    	MOV R0, #225
0x006F	0x22      	RET
;Drv.c,110 :: 		case '×': return 0xAB;
L_translate56:
0x0070	0x78AB    	MOV R0, #171
0x0072	0x22      	RET
;Drv.c,111 :: 		case 'Ø': return 0xAC;
L_translate57:
0x0073	0x78AC    	MOV R0, #172
0x0075	0x22      	RET
;Drv.c,112 :: 		case 'Ù': return 0xE2;
L_translate58:
0x0076	0x78E2    	MOV R0, #226
0x0078	0x22      	RET
;Drv.c,113 :: 		case 'Ú': return 0xAD;
L_translate59:
0x0079	0x78AD    	MOV R0, #173
0x007B	0x22      	RET
;Drv.c,114 :: 		case 'Û': return 0xAE;
L_translate60:
0x007C	0x78AE    	MOV R0, #174
0x007E	0x22      	RET
;Drv.c,115 :: 		case 'Ü': return 'b';
L_translate61:
0x007F	0x7862    	MOV R0, #98
0x0081	0x22      	RET
;Drv.c,116 :: 		case 'Ý': return 0xAF;
L_translate62:
0x0082	0x78AF    	MOV R0, #175
0x0084	0x22      	RET
;Drv.c,117 :: 		case 'Þ': return 0xB0;
L_translate63:
0x0085	0x78B0    	MOV R0, #176
0x0087	0x22      	RET
;Drv.c,118 :: 		case 'ß': return 0xB1;
L_translate64:
0x0088	0x78B1    	MOV R0, #177
0x008A	0x22      	RET
;Drv.c,119 :: 		case 'à': return 'a';
L_translate65:
0x008B	0x7861    	MOV R0, #97
0x008D	0x22      	RET
;Drv.c,120 :: 		case 'á': return 0xB2;
L_translate66:
0x008E	0x78B2    	MOV R0, #178
0x0090	0x22      	RET
;Drv.c,121 :: 		case 'â': return 0xB3;
L_translate67:
0x0091	0x78B3    	MOV R0, #179
0x0093	0x22      	RET
;Drv.c,122 :: 		case 'ã': return 0xB4;
L_translate68:
0x0094	0x78B4    	MOV R0, #180
0x0096	0x22      	RET
;Drv.c,123 :: 		case 'ä': return 0xE3;
L_translate69:
0x0097	0x78E3    	MOV R0, #227
0x0099	0x22      	RET
;Drv.c,124 :: 		case 'å': return 'e';
L_translate70:
0x009A	0x7865    	MOV R0, #101
0x009C	0x22      	RET
;Drv.c,125 :: 		case '¸': return 0xB5;
L_translate71:
0x009D	0x78B5    	MOV R0, #181
0x009F	0x22      	RET
;Drv.c,126 :: 		case 'æ': return 0xB6;
L_translate72:
0x00A0	0x78B6    	MOV R0, #182
0x00A2	0x22      	RET
;Drv.c,127 :: 		case 'ç': return 0xB7;
L_translate73:
0x00A3	0x78B7    	MOV R0, #183
0x00A5	0x22      	RET
;Drv.c,128 :: 		case 'è': return 0xB8;
L_translate74:
0x00A6	0x78B8    	MOV R0, #184
0x00A8	0x22      	RET
;Drv.c,129 :: 		case 'é': return 0xB9;
L_translate75:
0x00A9	0x78B9    	MOV R0, #185
0x00AB	0x22      	RET
;Drv.c,130 :: 		case 'ê': return 0xBA;
L_translate76:
0x00AC	0x78BA    	MOV R0, #186
0x00AE	0x22      	RET
;Drv.c,131 :: 		case 'ë': return 0xBB;
L_translate77:
0x00AF	0x78BB    	MOV R0, #187
0x00B1	0x22      	RET
;Drv.c,132 :: 		case 'ì': return 0xBC;
L_translate78:
0x00B2	0x78BC    	MOV R0, #188
0x00B4	0x22      	RET
;Drv.c,133 :: 		case 'í': return 0xBD;
L_translate79:
0x00B5	0x78BD    	MOV R0, #189
0x00B7	0x22      	RET
;Drv.c,134 :: 		case 'î': return 'o';
L_translate80:
0x00B8	0x786F    	MOV R0, #111
0x00BA	0x22      	RET
;Drv.c,135 :: 		case 'ï': return 0xBE;
L_translate81:
0x00BB	0x78BE    	MOV R0, #190
0x00BD	0x22      	RET
;Drv.c,136 :: 		case 'ð': return 'p';
L_translate82:
0x00BE	0x7870    	MOV R0, #112
0x00C0	0x22      	RET
;Drv.c,137 :: 		case 'ñ': return 'c';
L_translate83:
0x00C1	0x7863    	MOV R0, #99
0x00C3	0x22      	RET
;Drv.c,138 :: 		case 'ò': return 0xBF;
L_translate84:
0x00C4	0x78BF    	MOV R0, #191
0x00C6	0x22      	RET
;Drv.c,139 :: 		case 'ó': return 'y';
L_translate85:
0x00C7	0x7879    	MOV R0, #121
0x00C9	0x22      	RET
;Drv.c,140 :: 		case 'ô': return 0xE4;
L_translate86:
0x00CA	0x78E4    	MOV R0, #228
0x00CC	0x22      	RET
;Drv.c,141 :: 		case 'õ': return 'x';
L_translate87:
0x00CD	0x7878    	MOV R0, #120
0x00CF	0x22      	RET
;Drv.c,142 :: 		case 'ö': return 0xE5;
L_translate88:
0x00D0	0x78E5    	MOV R0, #229
0x00D2	0x22      	RET
;Drv.c,143 :: 		case '÷': return 0xC0;
L_translate89:
0x00D3	0x78C0    	MOV R0, #192
0x00D5	0x22      	RET
;Drv.c,144 :: 		case 'ø': return 0xC1;
L_translate90:
0x00D6	0x78C1    	MOV R0, #193
0x00D8	0x22      	RET
;Drv.c,145 :: 		case 'ù': return 0xE6;
L_translate91:
0x00D9	0x78E6    	MOV R0, #230
0x00DB	0x22      	RET
;Drv.c,146 :: 		case 'ú': return 0xC2;
L_translate92:
0x00DC	0x78C2    	MOV R0, #194
0x00DE	0x22      	RET
;Drv.c,147 :: 		case 'û': return 0xC3;
L_translate93:
0x00DF	0x78C3    	MOV R0, #195
0x00E1	0x22      	RET
;Drv.c,148 :: 		case 'ü': return 0xC4;
L_translate94:
0x00E2	0x78C4    	MOV R0, #196
0x00E4	0x22      	RET
;Drv.c,149 :: 		case 'ý': return 0xC5;
L_translate95:
0x00E5	0x78C5    	MOV R0, #197
0x00E7	0x22      	RET
;Drv.c,150 :: 		case 'þ': return 0xC6;
L_translate96:
0x00E8	0x78C6    	MOV R0, #198
0x00EA	0x22      	RET
;Drv.c,151 :: 		case 'ÿ': return 0xC7;
L_translate97:
0x00EB	0x78C7    	MOV R0, #199
0x00ED	0x22      	RET
;Drv.c,152 :: 		default: return c;
L_translate98:
0x00EE	0xA812    	MOV R0, FARG_translate_c
0x00F0	0x22      	RET
;Drv.c,153 :: 		}
L_translate30:
0x00F1	0xE512    	MOV A, FARG_translate_c
0x00F3	0x64C0    	XRL A, #192
0x00F5	0x7002    	JNZ #2
0x00F7	0x0128    	AJMP L_translate32
0x00F9	0xE512    	MOV A, FARG_translate_c
0x00FB	0x64C1    	XRL A, #193
0x00FD	0x7002    	JNZ #2
0x00FF	0x012B    	AJMP L_translate33
0x0101	0xE512    	MOV A, FARG_translate_c
0x0103	0x64C2    	XRL A, #194
0x0105	0x7002    	JNZ #2
0x0107	0x012E    	AJMP L_translate34
0x0109	0xE512    	MOV A, FARG_translate_c
0x010B	0x64C3    	XRL A, #195
0x010D	0x7002    	JNZ #2
0x010F	0x0131    	AJMP L_translate35
0x0111	0xE512    	MOV A, FARG_translate_c
0x0113	0x64C4    	XRL A, #196
0x0115	0x7002    	JNZ #2
0x0117	0x0134    	AJMP L_translate36
0x0119	0xE512    	MOV A, FARG_translate_c
0x011B	0x64C5    	XRL A, #197
0x011D	0x7002    	JNZ #2
0x011F	0x0137    	AJMP L_translate37
0x0121	0xE512    	MOV A, FARG_translate_c
0x0123	0x64A8    	XRL A, #168
0x0125	0x7002    	JNZ #2
0x0127	0x013A    	AJMP L_translate38
0x0129	0xE512    	MOV A, FARG_translate_c
0x012B	0x64C6    	XRL A, #198
0x012D	0x7002    	JNZ #2
0x012F	0x013D    	AJMP L_translate39
0x0131	0xE512    	MOV A, FARG_translate_c
0x0133	0x64C7    	XRL A, #199
0x0135	0x7002    	JNZ #2
0x0137	0x0140    	AJMP L_translate40
0x0139	0xE512    	MOV A, FARG_translate_c
0x013B	0x64C8    	XRL A, #200
0x013D	0x7002    	JNZ #2
0x013F	0x0143    	AJMP L_translate41
0x0141	0xE512    	MOV A, FARG_translate_c
0x0143	0x64C9    	XRL A, #201
0x0145	0x7002    	JNZ #2
0x0147	0x0146    	AJMP L_translate42
0x0149	0xE512    	MOV A, FARG_translate_c
0x014B	0x64CA    	XRL A, #202
0x014D	0x7002    	JNZ #2
0x014F	0x0149    	AJMP L_translate43
0x0151	0xE512    	MOV A, FARG_translate_c
0x0153	0x64CB    	XRL A, #203
0x0155	0x7002    	JNZ #2
0x0157	0x014C    	AJMP L_translate44
0x0159	0xE512    	MOV A, FARG_translate_c
0x015B	0x64CC    	XRL A, #204
0x015D	0x7002    	JNZ #2
0x015F	0x014F    	AJMP L_translate45
0x0161	0xE512    	MOV A, FARG_translate_c
0x0163	0x64CD    	XRL A, #205
0x0165	0x7002    	JNZ #2
0x0167	0x0152    	AJMP L_translate46
0x0169	0xE512    	MOV A, FARG_translate_c
0x016B	0x64CE    	XRL A, #206
0x016D	0x7002    	JNZ #2
0x016F	0x0155    	AJMP L_translate47
0x0171	0xE512    	MOV A, FARG_translate_c
0x0173	0x64CF    	XRL A, #207
0x0175	0x7002    	JNZ #2
0x0177	0x0158    	AJMP L_translate48
0x0179	0xE512    	MOV A, FARG_translate_c
0x017B	0x64D0    	XRL A, #208
0x017D	0x7002    	JNZ #2
0x017F	0x015B    	AJMP L_translate49
0x0181	0xE512    	MOV A, FARG_translate_c
0x0183	0x64D1    	XRL A, #209
0x0185	0x7002    	JNZ #2
0x0187	0x015E    	AJMP L_translate50
0x0189	0xE512    	MOV A, FARG_translate_c
0x018B	0x64D2    	XRL A, #210
0x018D	0x7002    	JNZ #2
0x018F	0x0161    	AJMP L_translate51
0x0191	0xE512    	MOV A, FARG_translate_c
0x0193	0x64D3    	XRL A, #211
0x0195	0x7002    	JNZ #2
0x0197	0x0164    	AJMP L_translate52
0x0199	0xE512    	MOV A, FARG_translate_c
0x019B	0x64D4    	XRL A, #212
0x019D	0x7002    	JNZ #2
0x019F	0x0167    	AJMP L_translate53
0x01A1	0xE512    	MOV A, FARG_translate_c
0x01A3	0x64D5    	XRL A, #213
0x01A5	0x7002    	JNZ #2
0x01A7	0x016A    	AJMP L_translate54
0x01A9	0xE512    	MOV A, FARG_translate_c
0x01AB	0x64D6    	XRL A, #214
0x01AD	0x7002    	JNZ #2
0x01AF	0x016D    	AJMP L_translate55
0x01B1	0xE512    	MOV A, FARG_translate_c
0x01B3	0x64D7    	XRL A, #215
0x01B5	0x7002    	JNZ #2
0x01B7	0x0170    	AJMP L_translate56
0x01B9	0xE512    	MOV A, FARG_translate_c
0x01BB	0x64D8    	XRL A, #216
0x01BD	0x7002    	JNZ #2
0x01BF	0x0173    	AJMP L_translate57
0x01C1	0xE512    	MOV A, FARG_translate_c
0x01C3	0x64D9    	XRL A, #217
0x01C5	0x7002    	JNZ #2
0x01C7	0x0176    	AJMP L_translate58
0x01C9	0xE512    	MOV A, FARG_translate_c
0x01CB	0x64DA    	XRL A, #218
0x01CD	0x7002    	JNZ #2
0x01CF	0x0179    	AJMP L_translate59
0x01D1	0xE512    	MOV A, FARG_translate_c
0x01D3	0x64DB    	XRL A, #219
0x01D5	0x7002    	JNZ #2
0x01D7	0x017C    	AJMP L_translate60
0x01D9	0xE512    	MOV A, FARG_translate_c
0x01DB	0x64DC    	XRL A, #220
0x01DD	0x7002    	JNZ #2
0x01DF	0x017F    	AJMP L_translate61
0x01E1	0xE512    	MOV A, FARG_translate_c
0x01E3	0x64DD    	XRL A, #221
0x01E5	0x7002    	JNZ #2
0x01E7	0x0182    	AJMP L_translate62
0x01E9	0xE512    	MOV A, FARG_translate_c
0x01EB	0x64DE    	XRL A, #222
0x01ED	0x7002    	JNZ #2
0x01EF	0x0185    	AJMP L_translate63
0x01F1	0xE512    	MOV A, FARG_translate_c
0x01F3	0x64DF    	XRL A, #223
0x01F5	0x7002    	JNZ #2
0x01F7	0x0188    	AJMP L_translate64
0x01F9	0xE512    	MOV A, FARG_translate_c
0x01FB	0x64E0    	XRL A, #224
0x01FD	0x7002    	JNZ #2
0x01FF	0x018B    	AJMP L_translate65
0x0201	0xE512    	MOV A, FARG_translate_c
0x0203	0x64E1    	XRL A, #225
0x0205	0x7002    	JNZ #2
0x0207	0x018E    	AJMP L_translate66
0x0209	0xE512    	MOV A, FARG_translate_c
0x020B	0x64E2    	XRL A, #226
0x020D	0x7002    	JNZ #2
0x020F	0x0191    	AJMP L_translate67
0x0211	0xE512    	MOV A, FARG_translate_c
0x0213	0x64E3    	XRL A, #227
0x0215	0x7002    	JNZ #2
0x0217	0x0194    	AJMP L_translate68
0x0219	0xE512    	MOV A, FARG_translate_c
0x021B	0x64E4    	XRL A, #228
0x021D	0x7002    	JNZ #2
0x021F	0x0197    	AJMP L_translate69
0x0221	0xE512    	MOV A, FARG_translate_c
0x0223	0x64E5    	XRL A, #229
0x0225	0x7002    	JNZ #2
0x0227	0x019A    	AJMP L_translate70
0x0229	0xE512    	MOV A, FARG_translate_c
0x022B	0x64B8    	XRL A, #184
0x022D	0x7002    	JNZ #2
0x022F	0x019D    	AJMP L_translate71
0x0231	0xE512    	MOV A, FARG_translate_c
0x0233	0x64E6    	XRL A, #230
0x0235	0x7002    	JNZ #2
0x0237	0x01A0    	AJMP L_translate72
0x0239	0xE512    	MOV A, FARG_translate_c
0x023B	0x64E7    	XRL A, #231
0x023D	0x7002    	JNZ #2
0x023F	0x01A3    	AJMP L_translate73
0x0241	0xE512    	MOV A, FARG_translate_c
0x0243	0x64E8    	XRL A, #232
0x0245	0x7002    	JNZ #2
0x0247	0x01A6    	AJMP L_translate74
0x0249	0xE512    	MOV A, FARG_translate_c
0x024B	0x64E9    	XRL A, #233
0x024D	0x7002    	JNZ #2
0x024F	0x01A9    	AJMP L_translate75
0x0251	0xE512    	MOV A, FARG_translate_c
0x0253	0x64EA    	XRL A, #234
0x0255	0x7002    	JNZ #2
0x0257	0x01AC    	AJMP L_translate76
0x0259	0xE512    	MOV A, FARG_translate_c
0x025B	0x64EB    	XRL A, #235
0x025D	0x7002    	JNZ #2
0x025F	0x01AF    	AJMP L_translate77
0x0261	0xE512    	MOV A, FARG_translate_c
0x0263	0x64EC    	XRL A, #236
0x0265	0x7002    	JNZ #2
0x0267	0x01B2    	AJMP L_translate78
0x0269	0xE512    	MOV A, FARG_translate_c
0x026B	0x64ED    	XRL A, #237
0x026D	0x7002    	JNZ #2
0x026F	0x01B5    	AJMP L_translate79
0x0271	0xE512    	MOV A, FARG_translate_c
0x0273	0x64EE    	XRL A, #238
0x0275	0x7002    	JNZ #2
0x0277	0x01B8    	AJMP L_translate80
0x0279	0xE512    	MOV A, FARG_translate_c
0x027B	0x64EF    	XRL A, #239
0x027D	0x7002    	JNZ #2
0x027F	0x01BB    	AJMP L_translate81
0x0281	0xE512    	MOV A, FARG_translate_c
0x0283	0x64F0    	XRL A, #240
0x0285	0x7002    	JNZ #2
0x0287	0x01BE    	AJMP L_translate82
0x0289	0xE512    	MOV A, FARG_translate_c
0x028B	0x64F1    	XRL A, #241
0x028D	0x7002    	JNZ #2
0x028F	0x01C1    	AJMP L_translate83
0x0291	0xE512    	MOV A, FARG_translate_c
0x0293	0x64F2    	XRL A, #242
0x0295	0x7002    	JNZ #2
0x0297	0x01C4    	AJMP L_translate84
0x0299	0xE512    	MOV A, FARG_translate_c
0x029B	0x64F3    	XRL A, #243
0x029D	0x7002    	JNZ #2
0x029F	0x01C7    	AJMP L_translate85
0x02A1	0xE512    	MOV A, FARG_translate_c
0x02A3	0x64F4    	XRL A, #244
0x02A5	0x7002    	JNZ #2
0x02A7	0x01CA    	AJMP L_translate86
0x02A9	0xE512    	MOV A, FARG_translate_c
0x02AB	0x64F5    	XRL A, #245
0x02AD	0x7002    	JNZ #2
0x02AF	0x01CD    	AJMP L_translate87
0x02B1	0xE512    	MOV A, FARG_translate_c
0x02B3	0x64F6    	XRL A, #246
0x02B5	0x7002    	JNZ #2
0x02B7	0x01D0    	AJMP L_translate88
0x02B9	0xE512    	MOV A, FARG_translate_c
0x02BB	0x64F7    	XRL A, #247
0x02BD	0x7002    	JNZ #2
0x02BF	0x01D3    	AJMP L_translate89
0x02C1	0xE512    	MOV A, FARG_translate_c
0x02C3	0x64F8    	XRL A, #248
0x02C5	0x7002    	JNZ #2
0x02C7	0x01D6    	AJMP L_translate90
0x02C9	0xE512    	MOV A, FARG_translate_c
0x02CB	0x64F9    	XRL A, #249
0x02CD	0x7002    	JNZ #2
0x02CF	0x01D9    	AJMP L_translate91
0x02D1	0xE512    	MOV A, FARG_translate_c
0x02D3	0x64FA    	XRL A, #250
0x02D5	0x7002    	JNZ #2
0x02D7	0x01DC    	AJMP L_translate92
0x02D9	0xE512    	MOV A, FARG_translate_c
0x02DB	0x64FB    	XRL A, #251
0x02DD	0x7002    	JNZ #2
0x02DF	0x01DF    	AJMP L_translate93
0x02E1	0xE512    	MOV A, FARG_translate_c
0x02E3	0x64FC    	XRL A, #252
0x02E5	0x7002    	JNZ #2
0x02E7	0x01E2    	AJMP L_translate94
0x02E9	0xE512    	MOV A, FARG_translate_c
0x02EB	0x64FD    	XRL A, #253
0x02ED	0x7002    	JNZ #2
0x02EF	0x01E5    	AJMP L_translate95
0x02F1	0xE512    	MOV A, FARG_translate_c
0x02F3	0x64FE    	XRL A, #254
0x02F5	0x7002    	JNZ #2
0x02F7	0x01E8    	AJMP L_translate96
0x02F9	0xE512    	MOV A, FARG_translate_c
0x02FB	0x64FF    	XRL A, #255
0x02FD	0x7002    	JNZ #2
0x02FF	0x01EB    	AJMP L_translate97
0x0301	0x01EE    	AJMP L_translate98
;Drv.c,154 :: 		}
0x0303	0x22      	RET
; end of _translate
_outd:
;Drv.c,195 :: 		void outd(unsigned char c){
;Drv.c,197 :: 		c=translate(c);
0x0304	0x850E12  	MOV FARG_translate_c, FARG_outd_c+0
0x0307	0x1126    	ACALL _translate
0x0309	0x85000E  	MOV FARG_outd_c, 0
;Drv.c,198 :: 		RS = 1;
0x030C	0xD3      	SETB C
0x030D	0xE5B0    	MOV A, P3_6_bit
0x030F	0x92E6    	MOV #224.B6, C
0x0311	0xF5B0    	MOV P3_6_bit, A
;Drv.c,199 :: 		DB = c;
0x0313	0x8500A0  	MOV P2, 0
;Drv.c,200 :: 		E = 1;
0x0316	0xD3      	SETB C
0x0317	0xE5B0    	MOV A, P3_7_bit
0x0319	0x92E7    	MOV #224.B7, C
0x031B	0xF5B0    	MOV P3_7_bit, A
;Drv.c,201 :: 		E = 2;
0x031D	0xC3      	CLR C
0x031E	0xE5B0    	MOV A, P3_7_bit
0x0320	0x92E7    	MOV #224.B7, C
0x0322	0xF5B0    	MOV P3_7_bit, A
;Drv.c,202 :: 		for (i=0; i<21; i++);
0x0324	0x750F00  	MOV outd_i_L0, #0
L_outd111:
0x0327	0xC3      	CLR C
0x0328	0xE50F    	MOV A, outd_i_L0
0x032A	0x9415    	SUBB A, #21
0x032C	0x5004    	JNC L_outd112
0x032E	0x050F    	INC outd_i_L0
0x0330	0x80F5    	SJMP L_outd111
L_outd112:
;Drv.c,203 :: 		}
0x0332	0x22      	RET
; end of _outd
_DelayMs:
;Svetofor.c,116 :: 		void DelayMs(unsigned int m){  // çàäåðæêà ïî òàéìåðó
;Svetofor.c,119 :: 		ms=0;
0x0333	0x753000  	MOV _ms, #0
0x0336	0x753100  	MOV _ms+1, #0
;Svetofor.c,120 :: 		WMCON.WDTRST=1; // ñáðîñ ñòîðîæåâîãî òàéìåðà
0x0339	0xD3      	SETB C
0x033A	0xE596    	MOV A, WMCON
0x033C	0x92E1    	MOV #224.B1, C
0x033E	0xF596    	MOV WMCON, A
;Svetofor.c,121 :: 		while(ms!=m) continue;
L_DelayMs32:
0x0340	0xE530    	MOV A, _ms
0x0342	0x650E    	XRL A, FARG_DelayMs_m
0x0344	0x7004    	JNZ L__DelayMs39
0x0346	0xE531    	MOV A, _ms+1
0x0348	0x650F    	XRL A, FARG_DelayMs_m+1
L__DelayMs39:
0x034A	0x6002    	JZ L_DelayMs33
0x034C	0x80F2    	SJMP L_DelayMs32
L_DelayMs33:
;Svetofor.c,122 :: 		}
0x034E	0x22      	RET
; end of _DelayMs
_outcw:
;Drv.c,183 :: 		void outcw(unsigned char c){
;Drv.c,186 :: 		RS = 0;
0x034F	0xC3      	CLR C
0x0350	0xE5B0    	MOV A, P3_6_bit
0x0352	0x92E6    	MOV #224.B6, C
0x0354	0xF5B0    	MOV P3_6_bit, A
;Drv.c,187 :: 		DB = c;
0x0356	0x850EA0  	MOV P2, FARG_outcw_c+0
;Drv.c,188 :: 		E = 1;
0x0359	0xD3      	SETB C
0x035A	0xE5B0    	MOV A, P3_7_bit
0x035C	0x92E7    	MOV #224.B7, C
0x035E	0xF5B0    	MOV P3_7_bit, A
;Drv.c,189 :: 		E = 2;
0x0360	0xC3      	CLR C
0x0361	0xE5B0    	MOV A, P3_7_bit
0x0363	0x92E7    	MOV #224.B7, C
0x0365	0xF5B0    	MOV P3_7_bit, A
;Drv.c,190 :: 		for (i=0; i<20; i++);
0x0367	0x750F00  	MOV outcw_i_L0, #0
L_outcw102:
0x036A	0xC3      	CLR C
0x036B	0xE50F    	MOV A, outcw_i_L0
0x036D	0x9414    	SUBB A, #20
0x036F	0x5004    	JNC L_outcw103
0x0371	0x050F    	INC outcw_i_L0
0x0373	0x80F5    	SJMP L_outcw102
L_outcw103:
;Drv.c,191 :: 		if (c==1||c==2||c==3)
0x0375	0xE50E    	MOV A, FARG_outcw_c
0x0377	0x6401    	XRL A, #1
0x0379	0x600E    	JZ L__outcw114
0x037B	0xE50E    	MOV A, FARG_outcw_c
0x037D	0x6402    	XRL A, #2
0x037F	0x6008    	JZ L__outcw114
0x0381	0xE50E    	MOV A, FARG_outcw_c
0x0383	0x6403    	XRL A, #3
0x0385	0x6002    	JZ L__outcw114
0x0387	0x801F    	SJMP L_outcw107
L__outcw114:
;Drv.c,192 :: 		for (j=0; j<500; j++);
0x0389	0x751000  	MOV outcw_j_L0, #0
0x038C	0x751100  	MOV outcw_j_L0+1, #0
L_outcw108:
0x038F	0xC3      	CLR C
0x0390	0xE510    	MOV A, outcw_j_L0
0x0392	0x94F4    	SUBB A, #244
0x0394	0xE511    	MOV A, outcw_j_L0+1
0x0396	0x9401    	SUBB A, #1
0x0398	0x500E    	JNC L_outcw109
0x039A	0x7401    	MOV A, #1
0x039C	0x2510    	ADD A, outcw_j_L0
0x039E	0xF510    	MOV outcw_j_L0, A
0x03A0	0x7400    	MOV A, #0
0x03A2	0x3511    	ADDC A, outcw_j_L0+1
0x03A4	0xF511    	MOV outcw_j_L0+1, A
0x03A6	0x80E7    	SJMP L_outcw108
L_outcw109:
L_outcw107:
;Drv.c,193 :: 		}
0x03A8	0x22      	RET
; end of _outcw
_rd_EEPROM:
;Drv.c,167 :: 		unsigned char rd_EEPROM(unsigned int addr)
;Drv.c,170 :: 		DP0L=addr;
0x03A9	0x850C82  	MOV DP0L, FARG_rd_EEPROM_addr+0
;Drv.c,171 :: 		DP0H=addr>>8;
0x03AC	0xA80D    	MOV R0, FARG_rd_EEPROM_addr+1
0x03AE	0x7900    	MOV R1, #0
0x03B0	0x850083  	MOV DP0H, 0
;Drv.c,172 :: 		asm movx A,@DPTR;
0x03B3	0xE0      	MOVX A, @DPTR
;Drv.c,173 :: 		return ACC;
0x03B4	0xA8E0    	MOV R0, ACC
;Drv.c,174 :: 		}
0x03B6	0x22      	RET
; end of _rd_EEPROM
_ScanKbd:
;Drv.c,59 :: 		unsigned char ScanKbd(void) {
;Drv.c,61 :: 		unsigned char kp = 0;
0x03B7	0x750C00  	MOV ScanKbd_kp_L0, #0
;Drv.c,62 :: 		P0 = P0&0x1F|0xC0;
0x03BA	0xE580    	MOV A, P0
0x03BC	0x541F    	ANL A, #31
0x03BE	0xF8      	MOV R0, A
0x03BF	0x44C0    	ORL A, #192
0x03C1	0xF580    	MOV P0, A
;Drv.c,63 :: 		for(i=0;i<10;i++);
0x03C3	0x750D00  	MOV ScanKbd_i_L0, #0
L_ScanKbd18:
0x03C6	0xC3      	CLR C
0x03C7	0xE50D    	MOV A, ScanKbd_i_L0
0x03C9	0x940A    	SUBB A, #10
0x03CB	0x5004    	JNC L_ScanKbd19
0x03CD	0x050D    	INC ScanKbd_i_L0
0x03CF	0x80F5    	SJMP L_ScanKbd18
L_ScanKbd19:
;Drv.c,64 :: 		if (!P1_0_bit) kp = '7';
0x03D1	0x209003  	JB P1_0_bit, L_ScanKbd21
0x03D4	0x750C37  	MOV ScanKbd_kp_L0, #55
L_ScanKbd21:
;Drv.c,68 :: 		P0 = P0&0x1F|0xA0;
0x03D7	0xE580    	MOV A, P0
0x03D9	0x541F    	ANL A, #31
0x03DB	0xF8      	MOV R0, A
0x03DC	0x44A0    	ORL A, #160
0x03DE	0xF580    	MOV P0, A
;Drv.c,69 :: 		for(i=0;i<10;i++);
0x03E0	0x750D00  	MOV ScanKbd_i_L0, #0
L_ScanKbd22:
0x03E3	0xC3      	CLR C
0x03E4	0xE50D    	MOV A, ScanKbd_i_L0
0x03E6	0x940A    	SUBB A, #10
0x03E8	0x5004    	JNC L_ScanKbd23
0x03EA	0x050D    	INC ScanKbd_i_L0
0x03EC	0x80F5    	SJMP L_ScanKbd22
L_ScanKbd23:
;Drv.c,70 :: 		if (!P1_0_bit) kp = '8';
0x03EE	0x209003  	JB P1_0_bit, L_ScanKbd25
0x03F1	0x750C38  	MOV ScanKbd_kp_L0, #56
L_ScanKbd25:
;Drv.c,74 :: 		P0 = P0&0x1F|0x60;
0x03F4	0xE580    	MOV A, P0
0x03F6	0x541F    	ANL A, #31
0x03F8	0xF8      	MOV R0, A
0x03F9	0x4460    	ORL A, #96
0x03FB	0xF580    	MOV P0, A
;Drv.c,75 :: 		for(i=0;i<10;i++);
0x03FD	0x750D00  	MOV ScanKbd_i_L0, #0
L_ScanKbd26:
0x0400	0xC3      	CLR C
0x0401	0xE50D    	MOV A, ScanKbd_i_L0
0x0403	0x940A    	SUBB A, #10
0x0405	0x5004    	JNC L_ScanKbd27
0x0407	0x050D    	INC ScanKbd_i_L0
0x0409	0x80F5    	SJMP L_ScanKbd26
L_ScanKbd27:
;Drv.c,76 :: 		if (!P1_0_bit) kp = '9';
0x040B	0x209003  	JB P1_0_bit, L_ScanKbd29
0x040E	0x750C39  	MOV ScanKbd_kp_L0, #57
L_ScanKbd29:
;Drv.c,80 :: 		return kp;
0x0411	0xA80C    	MOV R0, ScanKbd_kp_L0
;Drv.c,81 :: 		}
0x0413	0x22      	RET
; end of _ScanKbd
_init:
;Drv.c,5 :: 		void init(void){
;Drv.c,9 :: 		WMCON = 0b11111001;  // Enable WatchDog Timer, set prescaller bits to 111
0x0414	0x7596F9  	MOV WMCON, #249
;Drv.c,12 :: 		WMCON|=0x08;  // internal EEPROM enable
0x0417	0x439608  	ORL WMCON, #8
;Drv.c,13 :: 		WMCON&=0xfb;  // DPTR = DP0
0x041A	0x5396FB  	ANL WMCON, #251
;Drv.c,16 :: 		PCON |= 0x80;        // SMOD=1
0x041D	0x438780  	ORL PCON, #128
;Drv.c,17 :: 		SCON = 0x72;        // mode 1, receiver enable
0x0420	0x759872  	MOV SCON, #114
;Drv.c,18 :: 		TMOD = 0x22;        //Timers 0&1 are 8-bit timers with auto-reload
0x0423	0x758922  	MOV TMOD, #34
;Drv.c,19 :: 		TH1   = 0xF5;        // 9600 baud at 20 MHz
0x0426	0x758DF5  	MOV TH1, #245
;Drv.c,20 :: 		ES_bit = 0;
0x0429	0xC2AC    	CLR ES_bit
;Drv.c,23 :: 		TF1_bit = 0;       // Ensure that Timer1 interrupt flag is cleared
0x042B	0xC28F    	CLR TF1_bit
;Drv.c,24 :: 		ET1_bit = 1;       // Enable Timer1 interrupt
0x042D	0xD2AB    	SETB ET1_bit
;Drv.c,25 :: 		EA_bit  = 1;       // Set global interrupt enable
0x042F	0xD2AF    	SETB EA_bit
;Drv.c,27 :: 		GATE1_bit = 0;     // Clear this flag to enable Timer1 whenever TR1 bit is set.
0x0431	0xC3      	CLR C
0x0432	0xE589    	MOV A, GATE1_bit
0x0434	0x92E7    	MOV #224.B7, C
0x0436	0xF589    	MOV GATE1_bit, A
;Drv.c,28 :: 		C_T1_bit  = 0;     // Set Timer operation: Timer1 counts the divided-down systam clock.
0x0438	0xC3      	CLR C
0x0439	0xE589    	MOV A, C_T1_bit
0x043B	0x92E6    	MOV #224.B6, C
0x043D	0xF589    	MOV C_T1_bit, A
;Drv.c,29 :: 		M11_bit   = 0;     // M11_M01 = 01    =>   Mode 1(16-bit Timer/Counter)
0x043F	0xC3      	CLR C
0x0440	0xE589    	MOV A, M11_bit
0x0442	0x92E5    	MOV #224.B5, C
0x0444	0xF589    	MOV M11_bit, A
;Drv.c,30 :: 		M01_bit   = 1;
0x0446	0xD3      	SETB C
0x0447	0xE589    	MOV A, M01_bit
0x0449	0x92E4    	MOV #224.B4, C
0x044B	0xF589    	MOV M01_bit, A
;Drv.c,32 :: 		TR1_bit = 0;       // Turn off Timer1
0x044D	0xC28E    	CLR TR1_bit
;Drv.c,33 :: 		TH1 = 0xFC;        // Reset Timer1 high byte  65536-1000
0x044F	0x758DFC  	MOV TH1, #252
;Drv.c,34 :: 		TL1 = 0x18;        // Reset Timer1 low byte
0x0452	0x758B18  	MOV TL1, #24
;Drv.c,35 :: 		TR1_bit = 1;       // Run Timer1
0x0455	0xD28E    	SETB TR1_bit
;Drv.c,39 :: 		P3=0xff;
0x0457	0x75B0FF  	MOV P3, #255
;Drv.c,40 :: 		EX0_bit = 1;
0x045A	0xD2A8    	SETB EX0_bit
;Drv.c,44 :: 		DelayMs(30);
0x045C	0x750E1E  	MOV FARG_DelayMs_m, #30
0x045F	0x750F00  	MOV FARG_DelayMs_m+1, #0
0x0462	0x7133    	ACALL _DelayMs
;Drv.c,45 :: 		RW = 0;
0x0464	0xC3      	CLR C
0x0465	0xE5B0    	MOV A, P3_5_bit
0x0467	0x92E5    	MOV #224.B5, C
0x0469	0xF5B0    	MOV P3_5_bit, A
;Drv.c,46 :: 		outcw(0x3C);
0x046B	0x750E3C  	MOV FARG_outcw_c, #60
0x046E	0x714F    	ACALL _outcw
;Drv.c,47 :: 		outcw(0x0C);
0x0470	0x750E0C  	MOV FARG_outcw_c, #12
0x0473	0x714F    	ACALL _outcw
;Drv.c,48 :: 		outcw(0x01);
0x0475	0x750E01  	MOV FARG_outcw_c, #1
0x0478	0x714F    	ACALL _outcw
;Drv.c,49 :: 		outcw(0x06);
0x047A	0x750E06  	MOV FARG_outcw_c, #6
0x047D	0x714F    	ACALL _outcw
;Drv.c,50 :: 		outcw(0x40);
0x047F	0x750E40  	MOV FARG_outcw_c, #64
0x0482	0x714F    	ACALL _outcw
;Drv.c,51 :: 		for(i=0;i<8;i++) outd(0);
0x0484	0x750C00  	MOV init_i_L0, #0
L_init0:
0x0487	0xC3      	CLR C
0x0488	0xE50C    	MOV A, init_i_L0
0x048A	0x9408    	SUBB A, #8
0x048C	0x5009    	JNC L_init1
0x048E	0x750E00  	MOV FARG_outd_c, #0
0x0491	0x7104    	ACALL _outd
0x0493	0x050C    	INC init_i_L0
0x0495	0x80F0    	SJMP L_init0
L_init1:
;Drv.c,52 :: 		for(i=0;i<8;i++) outd(0x10);
0x0497	0x750C00  	MOV init_i_L0, #0
L_init3:
0x049A	0xC3      	CLR C
0x049B	0xE50C    	MOV A, init_i_L0
0x049D	0x9408    	SUBB A, #8
0x049F	0x5009    	JNC L_init4
0x04A1	0x750E10  	MOV FARG_outd_c, #16
0x04A4	0x7104    	ACALL _outd
0x04A6	0x050C    	INC init_i_L0
0x04A8	0x80F0    	SJMP L_init3
L_init4:
;Drv.c,53 :: 		for(i=0;i<8;i++) outd(0x18);
0x04AA	0x750C00  	MOV init_i_L0, #0
L_init6:
0x04AD	0xC3      	CLR C
0x04AE	0xE50C    	MOV A, init_i_L0
0x04B0	0x9408    	SUBB A, #8
0x04B2	0x5009    	JNC L_init7
0x04B4	0x750E18  	MOV FARG_outd_c, #24
0x04B7	0x7104    	ACALL _outd
0x04B9	0x050C    	INC init_i_L0
0x04BB	0x80F0    	SJMP L_init6
L_init7:
;Drv.c,54 :: 		for(i=0;i<8;i++) outd(0x1C);
0x04BD	0x750C00  	MOV init_i_L0, #0
L_init9:
0x04C0	0xC3      	CLR C
0x04C1	0xE50C    	MOV A, init_i_L0
0x04C3	0x9408    	SUBB A, #8
0x04C5	0x5009    	JNC L_init10
0x04C7	0x750E1C  	MOV FARG_outd_c, #28
0x04CA	0x7104    	ACALL _outd
0x04CC	0x050C    	INC init_i_L0
0x04CE	0x80F0    	SJMP L_init9
L_init10:
;Drv.c,55 :: 		for(i=0;i<8;i++) outd(0x1E);
0x04D0	0x750C00  	MOV init_i_L0, #0
L_init12:
0x04D3	0xC3      	CLR C
0x04D4	0xE50C    	MOV A, init_i_L0
0x04D6	0x9408    	SUBB A, #8
0x04D8	0x5009    	JNC L_init13
0x04DA	0x750E1E  	MOV FARG_outd_c, #30
0x04DD	0x7104    	ACALL _outd
0x04DF	0x050C    	INC init_i_L0
0x04E1	0x80F0    	SJMP L_init12
L_init13:
;Drv.c,56 :: 		for(i=0;i<8;i++) outd(0x1F);
0x04E3	0x750C00  	MOV init_i_L0, #0
L_init15:
0x04E6	0xC3      	CLR C
0x04E7	0xE50C    	MOV A, init_i_L0
0x04E9	0x9408    	SUBB A, #8
0x04EB	0x5009    	JNC L_init16
0x04ED	0x750E1F  	MOV FARG_outd_c, #31
0x04F0	0x7104    	ACALL _outd
0x04F2	0x050C    	INC init_i_L0
0x04F4	0x80F0    	SJMP L_init15
L_init16:
;Drv.c,57 :: 		}
0x04F6	0x22      	RET
; end of _init
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x04F7	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x04F8	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x04F9	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x04FA	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x04FB	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x04FC	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x04FE	0x22      	RET
; end of ___CC2D
_clear_lcd:
;Drv.c,176 :: 		void clear_lcd(void){
;Drv.c,178 :: 		outcw(0x80);
0x04FF	0x750E80  	MOV FARG_outcw_c, #128
0x0502	0x714F    	ACALL _outcw
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x0504	0x750C00  	MOV clear_lcd_i_L0, #0
L_clear_lcd99:
0x0507	0xC3      	CLR C
0x0508	0xE50C    	MOV A, clear_lcd_i_L0
0x050A	0x9410    	SUBB A, #16
0x050C	0x5009    	JNC L_clear_lcd100
;Drv.c,180 :: 		outd(' ');
0x050E	0x750E20  	MOV FARG_outd_c, #32
0x0511	0x7104    	ACALL _outd
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x0513	0x050C    	INC clear_lcd_i_L0
;Drv.c,180 :: 		outd(' ');
0x0515	0x80F0    	SJMP L_clear_lcd99
L_clear_lcd100:
;Drv.c,181 :: 		}
0x0517	0x22      	RET
; end of _clear_lcd
_out_str:
;Svetofor.c,47 :: 		void out_str()
;Svetofor.c,49 :: 		int i = 0;
0x0518	0x750C00  	MOV out_str_i_L0, #0
0x051B	0x750D00  	MOV out_str_i_L0+1, #0
;Svetofor.c,50 :: 		outcw(0x80);
0x051E	0x750E80  	MOV FARG_outcw_c, #128
0x0521	0x714F    	ACALL _outcw
;Svetofor.c,51 :: 		for (i; i < 16; ++i)
L_out_str5:
0x0523	0xC3      	CLR C
0x0524	0xE50C    	MOV A, out_str_i_L0
0x0526	0x9410    	SUBB A, #16
0x0528	0x7400    	MOV A, #0
0x052A	0x6480    	XRL A, #128
0x052C	0xF8      	MOV R0, A
0x052D	0xE50D    	MOV A, out_str_i_L0+1
0x052F	0x6480    	XRL A, #128
0x0531	0x98      	SUBB A, R0
0x0532	0x5053    	JNC L_out_str6
;Svetofor.c,52 :: 		outd(str[(i+pos >= 16) ? i+pos-16 : i+pos]);
0x0534	0xE546    	MOV A, _pos
0x0536	0x250C    	ADD A, out_str_i_L0
0x0538	0xF9      	MOV R1, A
0x0539	0xE4      	CLR A
0x053A	0x350D    	ADDC A, out_str_i_L0+1
0x053C	0xFA      	MOV R2, A
0x053D	0xC3      	CLR C
0x053E	0xE9      	MOV A, R1
0x053F	0x9410    	SUBB A, #16
0x0541	0x7400    	MOV A, #0
0x0543	0x6480    	XRL A, #128
0x0545	0xF8      	MOV R0, A
0x0546	0xEA      	MOV A, R2
0x0547	0x6480    	XRL A, #128
0x0549	0x98      	SUBB A, R0
0x054A	0x4018    	JC L_out_str8
0x054C	0xE546    	MOV A, _pos
0x054E	0x250C    	ADD A, out_str_i_L0
0x0550	0xF8      	MOV R0, A
0x0551	0xE4      	CLR A
0x0552	0x350D    	ADDC A, out_str_i_L0+1
0x0554	0xF9      	MOV R1, A
0x0555	0xC3      	CLR C
0x0556	0xE8      	MOV A, R0
0x0557	0x9410    	SUBB A, #16
0x0559	0xF8      	MOV R0, A
0x055A	0xE9      	MOV A, R1
0x055B	0x9400    	SUBB A, #0
0x055D	0xF9      	MOV R1, A
0x055E	0xAA00    	MOV R2, R0
0x0560	0xAB01    	MOV R3, R1
0x0562	0x800D    	SJMP L_out_str9
L_out_str8:
0x0564	0xE546    	MOV A, _pos
0x0566	0x250C    	ADD A, out_str_i_L0
0x0568	0xF8      	MOV R0, A
0x0569	0xE4      	CLR A
0x056A	0x350D    	ADDC A, out_str_i_L0+1
0x056C	0xF9      	MOV R1, A
0x056D	0xAA00    	MOV R2, R0
0x056F	0xAB01    	MOV R3, R1
L_out_str9:
0x0571	0x7432    	MOV A, lo_addr(_str)
0x0573	0x2A      	ADD A, R2
0x0574	0xF8      	MOV R0, A
0x0575	0x860E    	MOV FARG_outd_c, @R0
0x0577	0x7104    	ACALL _outd
;Svetofor.c,51 :: 		for (i; i < 16; ++i)
0x0579	0x7401    	MOV A, #1
0x057B	0x250C    	ADD A, out_str_i_L0
0x057D	0xF50C    	MOV out_str_i_L0, A
0x057F	0x7400    	MOV A, #0
0x0581	0x350D    	ADDC A, out_str_i_L0+1
0x0583	0xF50D    	MOV out_str_i_L0+1, A
;Svetofor.c,52 :: 		outd(str[(i+pos >= 16) ? i+pos-16 : i+pos]);
0x0585	0xA123    	AJMP L_out_str5
L_out_str6:
;Svetofor.c,53 :: 		if (pos == 0)
0x0587	0xE546    	MOV A, _pos
0x0589	0x7003    	JNZ L_out_str10
;Svetofor.c,54 :: 		pos = 16;
0x058B	0x754610  	MOV _pos, #16
L_out_str10:
;Svetofor.c,55 :: 		--pos;
0x058E	0x1546    	DEC _pos
;Svetofor.c,56 :: 		}
0x0590	0x22      	RET
; end of _out_str
_Timer1InterruptHandler:
0x0591	0xC0D0    	PUSH PSW
0x0593	0xC0E0    	PUSH ACC
0x0595	0xC0F0    	PUSH B
0x0597	0xC082    	PUSH DP0L
0x0599	0xC083    	PUSH DP0H
;Svetofor.c,124 :: 		void Timer1InterruptHandler() org IVT_ADDR_ET1{
;Svetofor.c,126 :: 		EA_bit = 0;        // Clear global interrupt enable flag
0x059B	0xC2AF    	CLR EA_bit
;Svetofor.c,127 :: 		TF1_bit = 0;       // Ensure that Timer1 interrupt flag is cleared
0x059D	0xC28F    	CLR TF1_bit
;Svetofor.c,129 :: 		TR1_bit = 0;       // Stop Timer1
0x059F	0xC28E    	CLR TR1_bit
;Svetofor.c,130 :: 		TH1 = 0xFC;        // Reset Timer1 high byte  65536-1000
0x05A1	0x758DFC  	MOV TH1, #252
;Svetofor.c,131 :: 		TL1 = 0x18;        // Reset Timer1 low byte
0x05A4	0x758B18  	MOV TL1, #24
;Svetofor.c,134 :: 		ms++;
0x05A7	0x7401    	MOV A, #1
0x05A9	0x2530    	ADD A, _ms
0x05AB	0xF530    	MOV _ms, A
0x05AD	0x7400    	MOV A, #0
0x05AF	0x3531    	ADDC A, _ms+1
0x05B1	0xF531    	MOV _ms+1, A
;Svetofor.c,136 :: 		EA_bit = 1;        // Set global interrupt enable flag
0x05B3	0xD2AF    	SETB EA_bit
;Svetofor.c,137 :: 		TR1_bit = 1;       // Run Timer1
0x05B5	0xD28E    	SETB TR1_bit
;Svetofor.c,138 :: 		}
0x05B7	0xD083    	POP DP0H
0x05B9	0xD082    	POP DP0L
0x05BB	0xD0F0    	POP B
0x05BD	0xD0E0    	POP ACC
0x05BF	0xD0D0    	POP PSW
0x05C1	0x32      	RETI
; end of _Timer1InterruptHandler
_INT0_Interrupt:
0x05C2	0xC0D0    	PUSH PSW
0x05C4	0xC0E0    	PUSH ACC
0x05C6	0xC0F0    	PUSH B
0x05C8	0xC082    	PUSH DP0L
0x05CA	0xC083    	PUSH DP0H
;Svetofor.c,140 :: 		void INT0_Interrupt() org IVT_ADDR_EX0 {
;Svetofor.c,141 :: 		EA_bit = 0;
0x05CC	0xC2AF    	CLR EA_bit
;Svetofor.c,142 :: 		lcd_led=~lcd_led;
0x05CE	0xA284    	MOV C, P0_4_bit
0x05D0	0xB3      	CPL C
0x05D1	0x9284    	MOV P0_4_bit, C
;Svetofor.c,143 :: 		EA_bit = 1;
0x05D3	0xD2AF    	SETB EA_bit
;Svetofor.c,144 :: 		}
0x05D5	0xD083    	POP DP0H
0x05D7	0xD082    	POP DP0L
0x05D9	0xD0F0    	POP B
0x05DB	0xD0E0    	POP ACC
0x05DD	0xD0D0    	POP PSW
0x05DF	0x32      	RETI
; end of _INT0_Interrupt
_main:
0x05E0	0x758180  	MOV SP, #128
0x05E3	0x1206CA  	LCALL 1738
;Svetofor.c,58 :: 		void main (void) {
;Svetofor.c,61 :: 		init();
0x05E6	0x9114    	ACALL _init
;Svetofor.c,62 :: 		RED = 0;      // Êðàñíûé öâåò
0x05E8	0xC280    	CLR P0_0_bit
;Svetofor.c,63 :: 		YEL = 1;      // Æåëòûé öâåò
0x05EA	0xD281    	SETB P0_1_bit
;Svetofor.c,64 :: 		GRN = 1;      // Çåëåíûé öâåò
0x05EC	0xD282    	SETB P0_2_bit
;Svetofor.c,65 :: 		lcd_led = 0;  // Ïîäñâåòêà èíäèêàòîðà
0x05EE	0xC284    	CLR P0_4_bit
;Svetofor.c,66 :: 		tr=rd_EEPROM(0); if((tr>30)||(tr<5)) tr=5;
0x05F0	0x750C00  	MOV FARG_rd_EEPROM_addr, #0
0x05F3	0x750D00  	MOV FARG_rd_EEPROM_addr+1, #0
0x05F6	0x71A9    	ACALL _rd_EEPROM
0x05F8	0x850009  	MOV _tr, 0
0x05FB	0xD3      	SETB C
0x05FC	0xE8      	MOV A, R0
0x05FD	0x941E    	SUBB A, #30
0x05FF	0x5009    	JNC L__main36
0x0601	0xC3      	CLR C
0x0602	0xE509    	MOV A, _tr
0x0604	0x9405    	SUBB A, #5
0x0606	0x4002    	JC L__main36
0x0608	0x8003    	SJMP L_main13
L__main36:
0x060A	0x750905  	MOV _tr, #5
L_main13:
;Svetofor.c,67 :: 		ty=rd_EEPROM(2); if((ty>30)||(ty<5)) ty=5;
0x060D	0x750C02  	MOV FARG_rd_EEPROM_addr, #2
0x0610	0x750D00  	MOV FARG_rd_EEPROM_addr+1, #0
0x0613	0x71A9    	ACALL _rd_EEPROM
0x0615	0x85000A  	MOV _ty, 0
0x0618	0xD3      	SETB C
0x0619	0xE8      	MOV A, R0
0x061A	0x941E    	SUBB A, #30
0x061C	0x5009    	JNC L__main35
0x061E	0xC3      	CLR C
0x061F	0xE50A    	MOV A, _ty
0x0621	0x9405    	SUBB A, #5
0x0623	0x4002    	JC L__main35
0x0625	0x8003    	SJMP L_main16
L__main35:
0x0627	0x750A05  	MOV _ty, #5
L_main16:
;Svetofor.c,68 :: 		tg=rd_EEPROM(1); if((tg>30)||(tg<5)) tg=5;
0x062A	0x750C01  	MOV FARG_rd_EEPROM_addr, #1
0x062D	0x750D00  	MOV FARG_rd_EEPROM_addr+1, #0
0x0630	0x71A9    	ACALL _rd_EEPROM
0x0632	0x850008  	MOV _tg, 0
0x0635	0xD3      	SETB C
0x0636	0xE8      	MOV A, R0
0x0637	0x941E    	SUBB A, #30
0x0639	0x5009    	JNC L__main34
0x063B	0xC3      	CLR C
0x063C	0xE508    	MOV A, _tg
0x063E	0x9405    	SUBB A, #5
0x0640	0x4002    	JC L__main34
0x0642	0x8003    	SJMP L_main19
L__main34:
0x0644	0x750805  	MOV _tg, #5
L_main19:
;Svetofor.c,74 :: 		while (1) {
L_main20:
;Svetofor.c,75 :: 		key=ScanKbd();
0x0647	0x71B7    	ACALL _ScanKbd
0x0649	0x850044  	MOV _key, 0
;Svetofor.c,76 :: 		switch (state) {
0x064C	0x803C    	SJMP L_main22
;Svetofor.c,77 :: 		case R: // Êðàñíûé
L_main24:
;Svetofor.c,79 :: 		clear_lcd(); //outcw(0x81); outd('Ê'); outd('Ë'); //outd('ð'); outd('à');
0x064E	0x91FF    	ACALL _clear_lcd
;Svetofor.c,80 :: 		out_str();
0x0650	0xB118    	ACALL _out_str
;Svetofor.c,82 :: 		if (T_FLAG) { state=Y;  T_FLAG = 0;  YEL=0; RED=1; }
0x0652	0xE543    	MOV A, _T_FLAG
0x0654	0x600A    	JZ L_main25
0x0656	0x754505  	MOV _state, #5
0x0659	0x754300  	MOV _T_FLAG, #0
0x065C	0xC281    	CLR P0_1_bit
0x065E	0xD280    	SETB P0_0_bit
L_main25:
;Svetofor.c,83 :: 		break;
0x0660	0x803A    	SJMP L_main23
;Svetofor.c,84 :: 		case G: // Çåëåíûé
L_main26:
;Svetofor.c,86 :: 		clear_lcd(); //outcw(0x80); outd('Ç'); //outd('å'); outd('ë');
0x0662	0x91FF    	ACALL _clear_lcd
;Svetofor.c,87 :: 		out_str();
0x0664	0xB118    	ACALL _out_str
;Svetofor.c,89 :: 		if (T_FLAG) { state=R;  T_FLAG = 0; GRN=1; RED=0;}
0x0666	0xE543    	MOV A, _T_FLAG
0x0668	0x600A    	JZ L_main27
0x066A	0x754501  	MOV _state, #1
0x066D	0x754300  	MOV _T_FLAG, #0
0x0670	0xD282    	SETB P0_2_bit
0x0672	0xC280    	CLR P0_0_bit
L_main27:
;Svetofor.c,90 :: 		break;
0x0674	0x8026    	SJMP L_main23
;Svetofor.c,91 :: 		case Y: // Æåëòûé
L_main28:
;Svetofor.c,93 :: 		clear_lcd(); //outcw(0x80); outd('Æ'); //outd('å'); outd('ë');
0x0676	0x91FF    	ACALL _clear_lcd
;Svetofor.c,94 :: 		out_str();
0x0678	0xB118    	ACALL _out_str
;Svetofor.c,96 :: 		if (T_FLAG) { state=G;  T_FLAG = 0; GRN=0; YEL=1; }
0x067A	0xE543    	MOV A, _T_FLAG
0x067C	0x600A    	JZ L_main29
0x067E	0x754503  	MOV _state, #3
0x0681	0x754300  	MOV _T_FLAG, #0
0x0684	0xC282    	CLR P0_2_bit
0x0686	0xD281    	SETB P0_1_bit
L_main29:
;Svetofor.c,97 :: 		break;
0x0688	0x8012    	SJMP L_main23
;Svetofor.c,98 :: 		}
L_main22:
0x068A	0xE545    	MOV A, _state
0x068C	0x6401    	XRL A, #1
0x068E	0x60BE    	JZ L_main24
0x0690	0xE545    	MOV A, _state
0x0692	0x6403    	XRL A, #3
0x0694	0x60CC    	JZ L_main26
0x0696	0xE545    	MOV A, _state
0x0698	0x6405    	XRL A, #5
0x069A	0x60DA    	JZ L_main28
L_main23:
;Svetofor.c,99 :: 		DelayMs(100);            // òàêò ðàáîòû àâòîìàòà
0x069C	0x750E64  	MOV FARG_DelayMs_m, #100
0x069F	0x750F00  	MOV FARG_DelayMs_m+1, #0
0x06A2	0x7133    	ACALL _DelayMs
;Svetofor.c,100 :: 		if(t==0) T_FLAG=1; else t--;  // ñ÷åò÷èê
0x06A4	0xE50B    	MOV A, _t
0x06A6	0x7005    	JNZ L_main30
0x06A8	0x754301  	MOV _T_FLAG, #1
0x06AB	0x8002    	SJMP L_main31
L_main30:
0x06AD	0x150B    	DEC _t
L_main31:
;Svetofor.c,101 :: 		}
0x06AF	0xC147    	AJMP L_main20
;Svetofor.c,102 :: 		}
0x06B1	0x80FE    	SJMP #254
; end of _main
0x06CA	0x7830    	MOV R0, 48
0x06CC	0x7917    	MOV R1, 23
0x06CE	0x7582B3  	MOV DP0L, 179
0x06D1	0x758306  	MOV DP0H, 6
0x06D4	0x1204F7  	LCALL 1271
0x06D7	0x22      	RET
;Svetofor.c,0 :: ?ICS_ms
0x06B3	0x0000 ;?ICS_ms+0
; end of ?ICS_ms
;Svetofor.c,0 :: ?ICS_str
0x06B5	0xEFF0E8 ;?ICS_str+0
0x06B8	0xE2E5F2 ;?ICS_str+3
0x06BB	0x20EAE0 ;?ICS_str+6
0x06BE	0xEA20E4 ;?ICS_str+9
0x06C1	0xE5EBE0 ;?ICS_str+12
0x06C4	0x2900 ;?ICS_str+15
; end of ?ICS_str
;Svetofor.c,0 :: ?ICS_T_FLAG
0x06C6	0x00 ;?ICS_T_FLAG+0
; end of ?ICS_T_FLAG
;Svetofor.c,0 :: ?ICS_key
0x06C7	0x00 ;?ICS_key+0
; end of ?ICS_key
;Svetofor.c,0 :: ?ICS_state
0x06C8	0x01 ;?ICS_state+0
; end of ?ICS_state
;Svetofor.c,0 :: ?ICS_pos
0x06C9	0x10 ;?ICS_pos+0
; end of ?ICS_pos
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0026     [734]    _translate
0x0304      [47]    _outd
0x0333      [28]    _DelayMs
0x034F      [90]    _outcw
0x03A9      [14]    _rd_EEPROM
0x03B7      [93]    _ScanKbd
0x0414     [227]    _init
0x04F7       [8]    ___CC2D
0x04FF      [25]    _clear_lcd
0x0518     [121]    _out_str
0x0591      [49]    _Timer1InterruptHandler
0x05C2      [30]    _INT0_Interrupt
0x05E0     [211]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    _tg
0x0009       [1]    _tr
0x000A       [1]    _ty
0x000B       [1]    _t
0x000C       [1]    init_i_L0
0x000C       [1]    ScanKbd_kp_L0
0x000C       [1]    clear_lcd_i_L0
0x000C       [2]    FARG_rd_EEPROM_addr
0x000C       [2]    out_str_i_L0
0x000D       [1]    ScanKbd_i_L0
0x000E       [1]    FARG_outcw_c
0x000E       [1]    FARG_outd_c
0x000E       [2]    FARG_DelayMs_m
0x000F       [1]    outcw_i_L0
0x000F       [1]    outd_i_L0
0x0010       [2]    outcw_j_L0
0x0012       [1]    FARG_translate_c
0x0030       [2]    _ms
0x0032      [17]    _str
0x0043       [1]    _T_FLAG
0x0044       [1]    _key
0x0045       [1]    _state
0x0046       [1]    _pos
0x0080       [0]    P0_2_bit
0x0080       [0]    P0_4_bit
0x0080       [1]    P0
0x0080       [0]    P0_0_bit
0x0080       [0]    P0_1_bit
0x0081       [1]    SP
0x0082       [1]    DP0L
0x0082       [1]    DPL
0x0083       [1]    DP0H
0x0083       [1]    DPH
0x0087       [1]    PCON
0x0088       [0]    TR1_bit
0x0088       [0]    TF1_bit
0x0089       [0]    M11_bit
0x0089       [0]    C_T1_bit
0x0089       [0]    GATE1_bit
0x0089       [0]    M01_bit
0x0089       [1]    TMOD
0x008B       [1]    TL1
0x008D       [1]    TH1
0x0090       [0]    P1_0_bit
0x0096       [1]    WMCON
0x0098       [1]    SCON
0x00A0       [1]    P2
0x00A8       [0]    EX0_bit
0x00A8       [0]    EA_bit
0x00A8       [0]    ES_bit
0x00A8       [0]    ET1_bit
0x00B0       [0]    P3_5_bit
0x00B0       [0]    P3_7_bit
0x00B0       [0]    P3_6_bit
0x00B0       [1]    P3
0x00D0       [1]    PSW
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x06B3       [2]    ?ICS_ms
0x06B5      [17]    ?ICS_str
0x06C6       [1]    ?ICS_T_FLAG
0x06C7       [1]    ?ICS_key
0x06C8       [1]    ?ICS_state
0x06C9       [1]    ?ICS_pos
//** Label List: ** 
//----------------------------------------------
  L_init0
  L_init1
  L_init2
  L_init3
  L_init4
  L_init5
  L_init6
  L_init7
  L_init8
  L_init9
  L_init10
  L_init11
  L_init12
  L_init13
  L_init14
  L_init15
  L_init16
  L_init17
  L_ScanKbd18
  L_ScanKbd19
  L_ScanKbd20
  L_ScanKbd21
  L_ScanKbd22
  L_ScanKbd23
  L_ScanKbd24
  L_ScanKbd25
  L_ScanKbd26
  L_ScanKbd27
  L_ScanKbd28
  L_ScanKbd29
  L_translate30
  L_translate31
  L_translate32
  L_translate33
  L_translate34
  L_translate35
  L_translate36
  L_translate37
  L_translate38
  L_translate39
  L_translate40
  L_translate41
  L_translate42
  L_translate43
  L_translate44
  L_translate45
  L_translate46
  L_translate47
  L_translate48
  L_translate49
  L_translate50
  L_translate51
  L_translate52
  L_translate53
  L_translate54
  L_translate55
  L_translate56
  L_translate57
  L_translate58
  L_translate59
  L_translate60
  L_translate61
  L_translate62
  L_translate63
  L_translate64
  L_translate65
  L_translate66
  L_translate67
  L_translate68
  L_translate69
  L_translate70
  L_translate71
  L_translate72
  L_translate73
  L_translate74
  L_translate75
  L_translate76
  L_translate77
  L_translate78
  L_translate79
  L_translate80
  L_translate81
  L_translate82
  L_translate83
  L_translate84
  L_translate85
  L_translate86
  L_translate87
  L_translate88
  L_translate89
  L_translate90
  L_translate91
  L_translate92
  L_translate93
  L_translate94
  L_translate95
  L_translate96
  L_translate97
  L_translate98
  L_clear_lcd99
  L_clear_lcd100
  L_clear_lcd101
  L_outcw102
  L_outcw103
  L_outcw104
  L_outcw105
  L_outcw106
  L_outcw107
  L_outcw108
  L_outcw109
  L_outcw110
  L_outd111
  L_outd112
  L_outd113
  L__outcw114
  _init
  _ScanKbd
  _translate
  _wr_EEPROM
  _rd_EEPROM
  _clear_lcd
  _outcw
  _outd
  L_ShiftRight0
  L_ShiftRight1
  L_init_string2
  L_init_string3
  L_init_string4
  L_out_str5
  L_out_str6
  L_out_str7
  L_out_str8
  L_out_str9
  L_out_str10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_DelayMs32
  L_DelayMs33
  L__main34
  L__main35
  L__main36
  _ShiftRight
  L__ShiftRight37
  L__ShiftRight38
  _init_string
  _out_str
  _main
  _DelayMs
  L__DelayMs39
  _Timer1InterruptHandler
  _INT0_Interrupt
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
  L_ShiftRight0
  L_ShiftRight1
  L_init_string2
  L_init_string3
  L_init_string4
  L_out_str5
  L_out_str6
  L_out_str7
  L_out_str8
  L_out_str9
  L_out_str10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_DelayMs32
  L_DelayMs33
  L__main34
  L__main35
  L__main36
  _ShiftRight
  L__ShiftRight37
  L__ShiftRight38
  _init_string
  _out_str
  _main
  _DelayMs
  L__DelayMs39
  _Timer1InterruptHandler
  _INT0_Interrupt
  L_ShiftRight0
  L_ShiftRight1
  L_init_string2
  L_init_string3
  L_init_string4
  L_out_str5
  L_out_str6
  L_out_str7
  L_out_str8
  L_out_str9
  L_out_str10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_DelayMs32
  L_DelayMs33
  L__main34
  L__main35
  L__main36
  _ShiftRight
  L__ShiftRight37
  L__ShiftRight38
  _init_string
  _out_str
  _main
  _DelayMs
  L__DelayMs39
  _Timer1InterruptHandler
  _INT0_Interrupt
